tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs the nodecellar application behind
  an haproxy instance on an openstack cloud environment.
imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.4/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.3/plugin.yaml

#  - infra/openstack/openstack.yaml
  - infra/aws-ec2/aws-ec2.yaml

  - types/nodecellar.yaml
  - types/haproxy/haproxy.yaml
  - types/scale/scale.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################

inputs:


  agent_user:
    description: >
      User for connecting to agent VM's



  #######################
  # AWS inputs
  #######################

  aws_image:
    description: >
      Image to be used when launching agent VM's

  aws_size:
    description: >
      Flavor of the agent VM's

  ########################
  # Openstack inputs
  ########################

  openstack_image:
    description: >
      Image to be used when launching agent VM's

  openstack_flavor:
    description: >
      Flavor of the agent VM's



node_templates:

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    relationships:

      ################################
      # Setting the mongo connection
      ################################

      - type: node_connected_to_mongo
        target: mongod

      ################################
      # Setting the nodejs connection
      ################################

      - type: node_contained_in_nodejs
        target: nodejs

      ################################
      # Setting the haproxy connection
      ################################

      - type: app_connected_to_haproxy
        target: haproxy

  mongod:
    type: nodecellar.nodes.MonitoredMongoDatabase
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  ########################################
  # Note: only ubuntu haproxy installation
  # is supported.
  ########################################

  haproxy:
    type: nodecellar.nodes.MonitoredHAProxy
    properties:
      backend_app_port: { get_property: [ nodecellar, port ] }
    relationships:
      - target: haproxy_frontend_host
        type: cloudify.relationships.contained_in




###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################



groups:

  scale_up_group:
    members: [nodejs_host]
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          policy_operates_on_group: true
          scale_limit: 6
          scale_direction: '<'
          scale_threshold: 6
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                node_id: nodecellar
                scale_compute: true

  scale_down_group:
    members: [nodejs_host]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 1
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                node_id: nodecellar
                scale_compute: true

  heal_group:
    members: [nodejs_host]
    policies:
      simple_autoheal_policy:
        type: cloudify.policies.types.host_failure
        properties:
          service:
            - .*nodejs_host.*.cpu.total.system
          interval_between_workflows: 60
        triggers:
          auto_heal_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: heal
              workflow_parameters:
                node_instance_id: { 'get_property': [ SELF, node_id ] }
                diagnose_value: { 'get_property': [ SELF, diagnose ] }