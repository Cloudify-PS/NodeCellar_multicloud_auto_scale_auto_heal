node_templates:


  mongod_host:
    type: nodecellar.nodes.MonitoredServer
    relationships:

      ###########################################################
      # Attaching the mongo security group to the mongo host
      ###########################################################

      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: mongod_security_group

  nodejs_host:
    type: nodecellar.nodes.MonitoredServer
    ###########################################################
    # Setting the nodejs_host initial number of instances to 2.
    # The default values for instances.deploy is 1.
    ###########################################################
    instances:
      deploy: 2

    relationships:

      ###########################################################
      # Attaching the nodecellar security group to the nodejs host
      ###########################################################

      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: nodecellar_security_group

  haproxy_frontend_host:
    type: nodecellar.nodes.MonitoredServer
    relationships:

      ###########################################################
      # Attaching an ip to the haproxy frontend host
      ###########################################################

      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: nodecellar_ip

      ###########################################################
      # Attaching the haproxy frontend security group to
      # the haproxy frontend host
      ###########################################################

      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: haproxy_frontend_security_group

  ###########################################################
  # A security group to enable access to the mongo host
  # using the port of the mongo node.
  #
  # We need this so that the nodecellar application can
  # comminicate with MongoDB, since they are running on
  # different hosts.
  ###########################################################

  mongod_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      description: Security Group for Mongo VMs
      rules:
        - ip_protocol: tcp
          from_port: { get_property: [ mongod, port ] }
          to_port: { get_property: [ mongod, port ] }
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 28017
          to_port: 28017
          cidr_ip: 0.0.0.0/0

  ###########################################################
  # A security group to enable access to the nodejs host
  # using the port of the nodejs node.
  #
  # We need this so that the nodecellar application can
  # receive web traffic.
  ###########################################################

  nodecellar_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      description: Security Group for Nodecellar VMs
      rules:
        - ip_protocol: tcp
          from_port: { get_property: [ nodecellar, port ] }
          to_port: { get_property: [ nodecellar, port ] }
          cidr_ip: 0.0.0.0/0

  ###########################################################
  # A security group to enable access to the haproxy frontend
  # host using the haproxy frontend_port property.
  # In addition, we open the statistics port (9000) of haproxy
  #
  # This security group will be attached to the
  # haproxy_frontend_host
  ###########################################################

  haproxy_frontend_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      description: Security Group for HAProxy VM
      rules:
        - ip_protocol: tcp
          from_port: { get_property: [ haproxy, frontend_port ] }
          to_port: { get_property: [ haproxy, frontend_port ] }
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: { get_property: [ haproxy, statistics_port ]}
          to_port: { get_property: [ haproxy, statistics_port ]}
          cidr_ip: 0.0.0.0/0

  ###########################################################
  # An ip to be attached to the nodejs host, since
  # eventually we want to be able to access it
  # from any machine, on any network.
  ###########################################################

  nodecellar_ip:
    type: cloudify.aws.nodes.ElasticIP

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ nodecellar_ip, aws_resource_id ] }
      port: { get_property: [ haproxy, frontend_port ] }






node_types:

  ###########################################################
  # We define a type that inherits ec2's default
  # server, and adds monitoring capabillities on top of it.
  ###########################################################

  nodecellar.nodes.MonitoredServer:
    derived_from: cloudify.aws.nodes.Instance
    properties:
      cloudify_agent:
        default:
          user: { get_input: agent_user }
      image_id:
        default: { get_input: aws_image }
      instance_type:
        default: { get_input: aws_size }
    interfaces:

      ###########################################################
      # We are infact telling cloudify to install a diamond
      # monitoring agent on the server.
      #
      # (see https://github.com/BrightcoveOS/Diamond)
      ###########################################################

      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 10
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall

      ###########################################################
      # Adding some collectors. These collectors are necessary
      # for the Cloudify UI to display the deafult metrics.
      ###########################################################

      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}
                  ProcessResourcesCollector:
                    config:
                      enabled: true
                      unit: B
                      measure_collector_time: true
                      cpu_interval: 5
                      process:
                        node:
                          name: node
